class User
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	--Default
	firstName: seq of char;
	fullName: seq of char;
	email: seq of char;
	password: seq of char;
	country: seq of char;
	phoneNumber: seq of char;
	company: seq of char;
	companyRegNum: nat;
	vat: nat;
	wallet: real;
	
	--Others
	favorites: set of Accomodation := {};
	
	--Inv
	inv companyRegNum >= 0;
	inv vat >= 0;
	
operations
-- TODO Define operations here
	public User(fName: seq of char, name: seq of char, em: seq of char, pw: seq of char, count: seq of char, phNum: seq of char, cp: seq of char, cpRegNum: int, v: int, initWallet: real) ret: User == (
		firstName := fName;
		fullName := name;
		email := em;
		password := pw;
		country := count;
		phoneNumber := phNum;
		company := cp;
		companyRegNum := cpRegNum;
		vat := v;
		wallet := initWallet;
	)
	post ret.firstName = fName and
			 ret.fullName = name and
			 ret.email = em and
			 ret.password = pw and
			 ret.country = count and
			 ret.phoneNumber = phNum and
			 ret.company = cp and
			 ret.companyRegNum = cpRegNum and
			 ret.vat = v and
			 ret.wallet = initWallet;
			 
	public getFirstName() ret: seq of char ==
		return firstName;
	
	public getFullName() ret: seq of char ==
		return fullName;
	
	public getEmail() ret: seq of char ==
		return email;
	
	public getPassword() ret: seq of char ==
		return password;
	
	public getCountry() ret: seq of char ==
		return country;
	
	public getPhoneNumber() ret: seq of char == 
		return phoneNumber;
		
	public getCompany() ret: seq of char == 
		return company;
		
	public getCompanyRegNum() ret: nat ==
		return companyRegNum;
		
	public getVat() ret: nat ==
		return vat; 
		
	pure public getWallet() ret: real == (
		return wallet; 
	);
		
	public getFavorites() ret: set of Accomodation == (
		return favorites;
	);
		
	public transaction(value: real) ==
		wallet := wallet + value;
		
	public addFavorite(h: Accomodation) == (
		favorites := favorites union {h}
	)
	pre h not in set favorites;
	
	public removeFavorite(h: Accomodation) == (
		favorites := favorites \ {h}
	)
	pre h in set favorites;
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User