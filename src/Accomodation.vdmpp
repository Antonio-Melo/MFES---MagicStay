class Accomodation
types
-- TODO Define types here
	public TypeOf = <House> | <Apartment> | <ApartaHotel> | <Hotel>;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	host: Landlord;
	type: TypeOf;
	reservations: set of Reservation := {};
operations
	-- TODO Define operations here
	public Accomodation(user: Landlord, typeOf: TypeOf) ret: Accomodation == (
		host := user;
		type := typeOf;
	)
	post ret.host = user and ret.type = typeOf;
	
	public getHost() ret: Landlord == 
		return host;
	
	public getType() ret: TypeOf ==
		return type;
		
	public addReservation(res: Reservation) ret: bool == (
		for all reservation in set reservations do (
			if overlaps(res, reservation) then
				return false;
		);
		reservations := reservations union {res};
		return true;
	);

	private overlaps(res1: Reservation, res2: Reservation) ret: bool == (
		-- check in must be before other check ins, check out must be before or the same day
		if Types`compare(res1.getCheckIn().date, res2.getCheckIn().date) = 1 and Types`compare(res1.getCheckOut().date, res2.getCheckIn().date) >= 0 then
			return false
		-- check in must be after other checkouts or the same day, check out must be after
		else if Types`compare(res1.getCheckIn().date, res2.getCheckOut().date) <= 0 and Types`compare(res1.getCheckOut().date, res2.getCheckOut().date) = -1 then
			return false
		else
			return true;
	);


functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Accomodation