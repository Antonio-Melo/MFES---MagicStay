class Accomodation
types
	public TypeOf = <House> | <Apartment> | <ApartaHotel> | <Hotel>;
instance variables
	area: seq of char;
	numBedrooms: nat;
	numStars: nat;
	numBeds: nat;
	numOfBathrooms: nat;
	host: Landlord;
	type: TypeOf;
	price: real;
	
	reservations: set of Reservation := {};
	reviews: set of Review := {};
operations
	public Accomodation: seq of char * nat * nat * nat * nat * Landlord * TypeOf * real ==> Accomodation
	Accomodation(a, nBedrooms, nStars, nBeds, nBathrooms, user, typeOf, p) == (
		area := a;
		numBedrooms := nBedrooms;
		numStars := nStars;
		numBeds := nBeds;
		numOfBathrooms := nBathrooms;
		host := user;
		type := typeOf;
		price := p;
		host.addHouse(self);
	);
	
	public getArea: () ==> seq of char
	getArea() == return area;
	
	public getNumBedrooms: () ==> nat 	
	getNumBedrooms() == return numBedrooms;
	
	public getNumStars: () ==> nat	
	getNumStars() == return numStars;
	
	public getNumBeds: () ==> nat	
	getNumBeds()== return numBeds;
	
	public getNumOfBathrooms: () ==> nat
	getNumOfBathrooms() == return numOfBathrooms;
	
	public getHost: () ==> Landlord
	getHost() == return host;
	
	public getType: () ==> TypeOf
	getType() == return type;
	
	public getPrice: () ==> real
	getPrice() == return price;
	
	pure public getReservations: () ==> set of Reservation	
	getReservations() == return reservations;
	
	public addReview: Review ==> ()
	addReview(rev) == (
		reviews := reviews union {rev};
	)
	pre rev not in set reviews;
	
	public removeReview: Review ==> ()
	removeReview(rev) == (
		reviews := reviews \ {rev};
	)
	pre rev in set reviews;
	
	public getReviews: () ==> set of Review
	getReviews() == return reviews;
	
	public addReservation: Reservation ==> ()
	addReservation(res) == (
		for all reservation in set reservations do (
			if overlaps(res, reservation) then
				return;
		);
		res.setPrice(price);
		res.getUser().transaction(-price);
		host.transaction(price);
		reservations := reservations union {res};
	)
	pre res.getUser().getWallet() > price;

	private overlaps: Reservation * Reservation ==> bool
	overlaps(res1, res2) == (
		if Types`compare(res1.getCheckIn().date, res2.getCheckOut().date) <= 0 or Types`compare(res2.getCheckIn().date, res1.getCheckOut().date) <= 0 then (
			return false)
		else
			return true;
	);
end Accomodation